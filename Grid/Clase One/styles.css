/* CSS Grid
   Concepto 
        -Layout 
        -Geometria que calcula el navgador para saber donde colocar cada elemento y que tanto separarlo
        de los demas
    Flexbox
        Permite organizar elementos (layout) a lo largo de un solo eje (main axis), si bien tiene 
        dos ejes pero solo son para alineacion. Para layout es solo uno 
    CSS Grid 
        Permite construir layouts a traves de dos ejes (horizontal y vertical | inlune y block)
        No importa la posiicon de un elemento en el codigo HTML para contruir el layout
        Al igual que flexbox require una relacion de padre (grid-container) a hijos (grid-item)
    
    Terminologia y elementos 
    Elementos del DOM

    grid-container 
        display:grid; 
        display:inline-grid;

    grid-items
        hijos directos
        Pseudoelementos ::before y ::after
        texto
    No existen en el DOM, el navegador los crea para posicionar y alinear elementos
    grid-tracks (las filas y columnas)
    grid-lines (se encuentran a los lados de los tracks, izquierda y derecha para columnas, ariba y abajo para filas)
    grid-cells 
       La interseccion entre una fila y una columna
    grid-areas
        Cualquier area rectangular delimitada por cuatro grid-lines


    Definir tracks 
        Tipos de grid 
           -Grid implicito 
           -Grid explicito 
        Tipos de tracks
            -Fijos 
            -Flexibles 
        Grid-gap 
    Colocar grid-items
*/


/* *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container{
    display: grid;
    height: 300px;
    background: yellow;
    font-size: 2em;
    grid-template-columns:1fr 2fr 1fr;
    grid-template-columns: 1fr 6fr 3fr;
    grid-gap: 1em 1em;

}

.item{
    background: pink;
}
.item:nth-child(even){
    background: cyan;
} */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    display: grid;
    min-height: 100vh;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: 4em 8em 1fr 4em;
    grid-gap: 1em;
}

aside{
    background: hsl(200, 100%, 60%);
    grid-column: 1/ span 3;
    grid-row: 3;
}

main{
    background: hsl(100, 100%, 60%);
    grid-column:  span 9;
    grid-row: 3;
}

footer{
    background: hsl(300, 100%, 60%);
    grid-row: 4;
    grid-column: 1 / span 12;
}

header{
    background: hsl(60, 100%, 60%);
    grid-row-start: 1;
    grid-column: 1 / span 12;
}

.feature{
    background: hsl(270, 100%, 70%);
    grid-column: span 4;
}

.block{
    display: flex;
    justify-content: center;
    align-items: center;
}